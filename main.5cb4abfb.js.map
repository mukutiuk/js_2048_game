{"version":3,"sources":["scripts/main.js"],"names":["ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","game","document","querySelector","score","buttonStart","messageStart","winner","lose","scoreCount","cells","matrix","getVelue","Math","random","setDataToTable","data","i","length","j","innerHTML","innerText","cellsGroup","push","x","y","isEmpty","setRandomCell","getRandomEmptyCell","map","tile","maxCell","row","max","apply","classList","remove","setupInputOnce","window","addEventListener","handleInput","once","events","key","canMuveUp","moveUp","canMuveDown","moveDown","canMuveRigth","moveRigth","canMuveLeft","moveLeft","groupCellsColum","reduce","acumCels","cell","groupCellsRow","sliderTile","colum","reverse","groupCells","groupCellsRowReverse","groupCell","forEach","element","sliderCellsInGroup","emptyCells","filter","floor","group","cellWithVelue","targetCell","isEmptyForMerg","prevValue","replacementIsEmptyValue","canMuve","groups","some","canMuveInGroup","index","e","add","contains","replace"],"mappings":"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","file":"main.5cb4abfb.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst ARROW_UP = 'ArrowUp';\nconst ARROW_DOWN = 'ArrowDown';\nconst ARROW_RIGHT = 'ArrowRight';\nconst ARROW_LEFT = 'ArrowLeft';\n\nconst game = document.querySelector('.game-field');\nconst score = document.querySelector('.game-score');\nconst buttonStart = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\nconst winner = document.querySelector('.message-win');\nconst lose = document.querySelector('.message-lose');\nlet scoreCount = 0;\nlet cells = [];\n\nlet matrix = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbuttonStart.addEventListener('click', (e) => {\n  messageStart.classList.add('hidden');\n  lose.classList.add('hidden');\n\n  if (buttonStart.classList.contains('start')) {\n    buttonStart.classList.replace('start', 'restart');\n    buttonStart.innerText = 'Restart';\n\n    winner.classList.add('hidden');\n  }\n\n  scoreCount = 0;\n  cells = [];\n  cellsGroup();\n\n  matrix = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  setRandomCell();\n  setRandomCell();\n\n  document.addEventListener('keydown', handleInput);\n\n  setDataToTable();\n});\n\nfunction getVelue() {\n  return Math.random() > 0.9 ? 4 : 2;\n}\n\nfunction setDataToTable() {\n  let data = '<tbody>';\n\n  for (let i = 0; i < matrix.length; i++) {\n    data += `<tr class=\"field-row\">`;\n\n    for (let j = 0; j < matrix[i].length; j++) {\n      data += `<td class=\"field-cell\n      field-cell--${matrix[i][j]}\">${matrix[i][j] || ''}</td>`;\n    }\n    data += '</tr>';\n  }\n\n  data += '</tbody>';\n  game.innerHTML = data;\n  score.innerText = scoreCount;\n}\n\nfunction cellsGroup() {\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      cells.push({\n        x: i,\n        y: j,\n        isEmpty: true,\n      });\n    }\n  }\n}\n\ncellsGroup();\n\nfunction setRandomCell() {\n  const { x, y } = getRandomEmptyCell();\n\n  cells = cells.map(tile => {\n    if (tile.x === x && tile.y === y) {\n      return ({\n        ...tile,\n        isEmpty: false,\n      });\n    }\n\n    return tile;\n  });\n\n  matrix[x][y] = getVelue();\n\n  const maxCell = matrix\n    .map(function(row) {\n      return Math.max.apply(Math, row);\n    });\n\n  const maxCellValue = Math.max.apply(null, maxCell);\n\n  if (maxCellValue >= 2048) {\n    winner.classList.remove('hidden');\n  }\n}\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, { once: true });\n}\n\nfunction handleInput(events) {\n  switch (events.key) {\n    case ARROW_UP:\n      if (!canMuveUp()) {\n        return setupInputOnce();\n      }\n\n      moveUp();\n      break;\n\n    case ARROW_DOWN:\n      if (!canMuveDown()) {\n        return setupInputOnce();\n      }\n\n      moveDown();\n      break;\n\n    case ARROW_RIGHT:\n      if (!canMuveRigth()) {\n        return setupInputOnce();\n      }\n\n      moveRigth();\n      break;\n\n    case ARROW_LEFT:\n      if (!canMuveLeft()) {\n        return setupInputOnce();\n      }\n\n      moveLeft();\n      break;\n  }\n  setRandomCell();\n\n  if (!canMuveUp() && !canMuveDown() && !canMuveLeft() && !canMuveRigth()) {\n    lose.classList.remove('hidden');\n  }\n\n  setDataToTable();\n}\n\nfunction groupCellsColum() {\n  return cells.reduce((acumCels, cell) => {\n    acumCels[cell.y] = acumCels[cell.y] || [];\n    acumCels[cell.y][cell.x] = cell;\n\n    return acumCels;\n  }, []);\n}\n\nfunction groupCellsRow() {\n  return cells.reduce((acumCels, cell) => {\n    acumCels[cell.x] = acumCels[cell.x] || [];\n    acumCels[cell.x][cell.y] = cell;\n\n    return acumCels;\n  }, []);\n}\n\nfunction moveUp() {\n  const groupCells = groupCellsColum();\n\n  sliderTile(groupCells);\n}\n\nfunction moveDown() {\n  const groupCells = groupCellsColum();\n\n  const groupCellsColumReverse = groupCells\n    .map(colum => [...colum].reverse());\n\n  sliderTile(groupCellsColumReverse);\n}\n\nfunction moveLeft() {\n  const groupCells = groupCellsRow();\n\n  sliderTile(groupCells);\n}\n\nfunction moveRigth() {\n  const groupCells = groupCellsRow();\n\n  const groupCellsRowReverse = groupCells\n    .map(row => [...row].reverse());\n\n  sliderTile(groupCellsRowReverse);\n\n  return groupCellsRowReverse;\n}\n\nfunction sliderTile(groupCell) {\n  groupCell.forEach(element => sliderCellsInGroup(element));\n}\n\nfunction getRandomEmptyCell() {\n  const emptyCells = cells.filter(({ isEmpty }) => isEmpty);\n\n  if (emptyCells.length) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n\n    return emptyCells[randomIndex];\n  }\n}\n\nfunction sliderCellsInGroup(group) {\n  for (let i = 0; i < group.length; i++) {\n    if (group[i].isEmpty === true) {\n      continue;\n    }\n\n    const cellWithVelue = group[i];\n\n    let targetCell;\n    let j = i - 1;\n\n    while (j >= 0\n          && (group[j].isEmpty === true\n          || isEmptyForMerg(group[j], cellWithVelue))) {\n      if (isEmptyForMerg(group[j], cellWithVelue)) {\n        scoreCount += matrix[cellWithVelue.x][cellWithVelue.y] * 2;\n      }\n\n      targetCell = group[j];\n\n      j--;\n    }\n\n    const prevValue = matrix[cellWithVelue.x][cellWithVelue.y];\n\n    if (!targetCell) {\n      continue;\n    }\n\n    matrix[cellWithVelue.x][cellWithVelue.y] = 0;\n\n    replacementIsEmptyValue(cellWithVelue, targetCell);\n\n    matrix[targetCell.x][targetCell.y] += prevValue;\n\n    setDataToTable();\n  }\n}\n\nfunction replacementIsEmptyValue(cellWithVelue, targetCell) {\n  for (const tile of cells) {\n    if (tile.x === targetCell.x && tile.y === targetCell.y) {\n      tile.isEmpty = false;\n    }\n\n    if (tile.x === cellWithVelue.x && tile.y === cellWithVelue.y) {\n      tile.isEmpty = true;\n    }\n  }\n}\n\nfunction isEmptyForMerg(tile, cellWithVelue) {\n  return matrix[tile.x][tile.y] === matrix[cellWithVelue.x][cellWithVelue.y];\n}\n\nfunction canMuveUp() {\n  const groups = groupCellsColum();\n\n  return canMuve(groups);\n}\n\nfunction canMuveDown() {\n  const groupCells = groupCellsColum();\n\n  const groupCellsColumReverse = groupCells\n    .map(colum => [...colum].reverse());\n\n  return canMuve(groupCellsColumReverse);\n}\n\nfunction canMuveRigth() {\n  const groupCells = groupCellsRow();\n\n  const groupCellsRowReverse = groupCells\n    .map(row => [...row].reverse());\n\n  return canMuve(groupCellsRowReverse);\n}\n\nfunction canMuveLeft() {\n  const groups = groupCellsRow();\n\n  return canMuve(groups);\n}\n\nfunction canMuve(groups) {\n  return groups.some(group => canMuveInGroup(group));\n}\n\nfunction canMuveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0) {\n      return false;\n    }\n\n    if (cell.isEmpty === true) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n\n    setDataToTable();\n\n    return targetCell.isEmpty === true\n      || isEmptyForMerg(cell, targetCell);\n  });\n}\n"]}